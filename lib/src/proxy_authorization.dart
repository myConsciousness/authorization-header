// Copyright (c) 2021, Kato Shinya. All rights reserved.
// Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Project imports:
import 'package:authorization_header/src/authorization.dart';
import 'package:authorization_header/src/authorization_header.dart';
import 'package:authorization_header/src/strategy/basic_auth_token_strategy.dart';
import 'package:authorization_header/src/strategy/bearer_auth_token_strategy.dart';

/// This class represents proxy authorization.
///
/// The name of the authorization header generated by this class will
/// always be set to **_Proxy-Authorization_**.
class ProxyAuthorization implements Authorization {
  /// Returns the new instance of [ProxyAuthorization].
  ProxyAuthorization.newInstance();

  /// The header name
  static const _headerName = 'Proxy-Authorization';

  @override
  AuthorizationHeader basic({
    required String username,
    required String password,
  }) =>
      AuthorizationHeader.from(
        name: _headerName,
        value: BasicAuthTokenStrategy.from(
          username: username,
          password: password,
        ).execute(),
      );

  @override
  AuthorizationHeader bearer({
    required String token,
  }) =>
      AuthorizationHeader.from(
        name: _headerName,
        value: BearerAuthTokenStrategy.from(token: token).execute(),
      );
}
